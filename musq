#!/usr/bin/python3 
import subprocess, os, yaml, shlex, argparse, importlib, logging, sys
from time import sleep
import paho.mqtt.client as mqtt

from os import listdir
from os.path import isfile, join

from musq_modules import abstract
from glue_classes import input_glue_script, output_glue_pipe, output_glue, input_glue_module


class musq():
    mqtt_server = "localhost"
    mqtt_port = "1883"
    mqtt_client_id="musq-default"
    mqtt_keepalive=12

    def __init__(self):
        parser=argparse.ArgumentParser("musq demo")
        parser.add_argument("-c", '--config', help='Configuration file', required=False)
        parser.add_argument("-l", '--log', help='Log file', required=False)
        args=parser.parse_args()
        self.config_file = args.config
        self.load_settings()

        # print(args.config)
        # raise SystemExit
        self.log_file=os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq.log")

        #logging.basicConfig(level=logging.DEBUG, format="[ %(asctime)s ] - [%(pathname)s func:%(funcName)s line:%(lineno)d]: %(message)s")
        #logging.basicConfig(filename=self.log_file, level=logging.DEBUG, format="[ %(asctime)s ] - [%(pathname)s func:%(funcName)s line:%(lineno)d]: %(message)s")
        #logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG, filename=self.log_file)

        logFormatter = logging.Formatter("%(asctime)s [%(levelname)-8.8s]  %(message)s")
        rootLogger = logging.getLogger()

        fileHandler = logging.FileHandler(self.log_file)
        fileHandler.setFormatter(logFormatter)
        rootLogger.addHandler(fileHandler)
        rootLogger.setLevel(logging.DEBUG)

        consoleHandler = logging.StreamHandler(sys.stdout)
        consoleHandler.setFormatter(logFormatter)
        rootLogger.addHandler(consoleHandler)

        logging.info("-------------")
        logging.info('musq starting')
        self.mod_list = self.reload_modules()
        # print(self.mod_list)


    def on_connect(self, client, userdata, flags, rc):
        logging.debug("Connected with result_code %s", str(rc))
        logging.debug("Sending subscribsption requests")

        if (self.subscriptions == None):
            logging.warning("Warning, no subscriptions defined in musq.conf, subscribing to #")
            self.mqtt_client.subscribe("#")
        else:
            for crt_sub in self.subscriptions:
                logging.debug("Subscribing to " + crt_sub)
                self.mqtt_client.subscribe(crt_sub)
        # self.mqtt_client.subscribe("/test/#", 0)
        # self.mqtt_client.subscribe("test/#", 0)
        # self.mqtt_client.subscribe("/example/#", 0)
        # self.mqtt_client.subscribe("example/#", 0)

    def reload_modules(self):
        logging.info("Reloading modules...")
        modules = {}
        logging.debug("Modules path %s", self.mod_path)
        files = [f for f in listdir(self.mod_path) if isfile(join(self.mod_path, f))]
        for xfile in files:
            if (xfile == 'abstract.py' or xfile == '__init__.py'):
                continue
            if (xfile[-3:] != ".py"):
                continue
            module_name = xfile[:-3]
            if (isfile(self.mod_path + module_name + ".py")):
                modules[module_name] = module_name

        result_str = []
        for key, mod_name in modules.items():
            result_str.append(key)
            modules[key] = self.load_single_module(key)

        logging.info("Loaded: %s", ", ".join(result_str))

        return modules

    def load_single_module(self, mod_name):
        #if (mod_name == 'unicorn'):
        #    return None
        # logging.debug("Loading module " + mod_name)
        mod = None
        try:
            mod = importlib.import_module("musq_modules." + mod_name)
        except:
            logging.debug("Loading module %s, failed: %s", mod_name, sys.exc_info())
            return None
        else:
            constructor = getattr(mod, 'mm_' + mod_name)
            instance = constructor()
            logging.debug("Loading module %s, id=%s, instance = %s", mod_name, instance.get_id(), instance)
            return instance

    def on_message(self, client, userdatanp, msg):
        logging.debug("Received message on topic: " + msg.topic+" "+str(msg.payload))

        inputs = self.load_inputs()
        for key, i in inputs.items():
            i.execute(msg.topic, msg)

    def on_glue_output_pub(self, glue_class, topic, payload):
        logging.debug("Publish event from glue_class: " + glue_class.name + " to topic " + topic + " with payload " + payload)
        self.mqtt_client.publish(topic, payload, 2)

    def load_inputs(self, cache=True):
        #cache = False
        if (cache == True and self.inputs != None):
            #logging.debug("inputs show from cache")
            return self.inputs

        a = yaml.load(open(self.config_file))
        a = a['inputs']

        inputs = {}

        for key, i in a.items():
            if ('scripts' in i.keys()):
                glue_class = input_glue_script(key, i['topic'], i['scripts'])
                glue_class.set_creator(self)
                inputs[key] = glue_class;
            if ('module' in i.keys()):
                if (i['module'] in self.mod_list):
                    # glue_class = input_glue_module(key, i['topic'], self.mod_list[i['module']])
                    # do not load disabled instances
                    if (('off' in i) or ('disabled' in i)):
                        logging.debug("Module disabled")
                        pass
                    module_instance = self.load_single_module(i['module'])
                    glue_class = input_glue_module(key, i['topic'], module_instance)
                    #self.mod_list[i['module']].link()
                    #self.mod_list[i['module']].set_creator(self)
                    #self.mod_list[i['module']].set_settings(i)
                    result = module_instance.link(self, i)
                    # module_instance.set_creator(self)
                    # module_instance.set_settings(i)

                    if ('thread' in i.keys()):
                        logging.info("starting thread for module " + key)
                        # self.mod_list[i['module']].run()
                        module_instance.run()

                    if (result == False):
                        logging.error("Module %s failed to instantiate", i['module'])
                        continue
                    inputs[key] = glue_class
                else:
                    logging.error("input '" + key + "' requested non-existent module " + i['module'])
                    pass
        self.inputs = inputs
        return inputs


    def load_pipes(self):
        a = yaml.load(open(self.config_file))
        pipes = {}
        if (a['outputs'] != None):
            for key, output in a['outputs'].items():
                if (output['type'] == 'pipe'):
                    pipes[key] = output
        return pipes

    def load_outputs(self):
        a = yaml.load(open(self.config_file))
        pipes = {}

        for key, output in a['outputs'].items():
            if (output['type'] == 'pipe'):
                pipes[key] = output

        logging.debug("Load outputs: pipes")
        logging.debug(pipes)
        return a

    def load_settings(self):
        found_config = False
        if (self.config_file != None):
            print("Supplied config file = " + self.config_file)
            if (not found_config and isfile(self.config_file)):
                found_config=True
                print("Using config file: " + self.config_file)

        test_file = os.path.join(os.path.expanduser("~"), ".musq.conf")
        print(test_file)
        if (not found_config and isfile(test_file)):
            found_config=True
            self.config_file=test_file
            print("Using config file: " + self.config_file)

        test_file=os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq.conf")
        self.inputs=None
        print(test_file)
        if (not found_config and isfile(test_file)):
            found_config=True
            self.config_file=test_file
            print("Using config file: " + self.config_file)

        settings = yaml.load(open(self.config_file))
        self.mqtt_server = settings['mqtt_server']
        self.mqtt_port = settings['mqtt_port']
        self.mqtt_client_id = settings['mqtt_client_id']
        self.mqtt_keepalive = settings['mqtt_keepalive']
        self.mod_path=os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq_modules", "")
        self.subscriptions = settings['subscriptions']
        print(self.subscriptions)

    def get_topic_matches(self, check_topic):
        inputs = self.load_inputs()
        result = {}
        for key, value in inputs.items():
            if self.topic_matches_sub(key, check_topic):
                result[key] = value
        return result

    def bug(self, sender, message):
        logging.info("Remote call from module thread: %s, message=%s", sender.prefix, message)
        if (message['type'] == 'pub'):
            if (message['payload'] != None and message['topic'] != None):
                self.mqtt_client.publish(message['topic'], message['payload'])
            
    def main(self):
        self.mqtt_client = mqtt.Client(self.mqtt_client_id, clean_session=True, protocol=mqtt.MQTTv311)
        self.mqtt_client.on_connect = self.on_connect
        self.mqtt_client.on_message = self.on_message
        self.mqtt_client.connect(self.mqtt_server, int(self.mqtt_port), 20)
        self.mqtt_client.loop_start()
        pipes_data = self.load_pipes()

        glue = {}
        for key, p in pipes_data.items():
            glue_class = output_glue_pipe(key, p['path'], p['topics'])
            glue_class.open()
            glue_class.set_creator(self)
            glue[key] = glue_class

        while True:
            sleep(0.01)
            for key, g in glue.items():
                g.loop()

m=musq()
m.main()
        

