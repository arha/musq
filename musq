#!/usr/bin/python3 
import subprocess
import os
import yaml
import argparse
import importlib
import logging
import sys
import time
import signal
import paho.mqtt.client as mqtt
from os.path import isfile


class Musq():
    __version__ = "0.3.1 rev 90"
    mqtt_server = "localhost"
    mqtt_port = "1883"
    mqtt_client_id="musq-default"
    mqtt_keepalive=12
    # this is used to trace when the heartbeat topic has been killed, and then safely shut down
    kill_heartbeat_id = None
    # logger = logging.getLogger(__name__)

    def __init__(self):
        parser = argparse.ArgumentParser("musq demo")
        parser.add_argument("-c", '--config', help='Configuration file', required=False)
        parser.add_argument("-l", '--log', help='Log file', required=False)
        args=parser.parse_args()
        self.config_file = args.config
        self.subscriptions = []
        self.mod_path = ""
        self.settings = {}
        self.load_settings()
        self.log_file=os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq.log")

        #logging.basicConfig(level=logging.DEBUG, format="[ %(asctime)s ] - [%(pathname)s func:%(funcName)s line:%(lineno)d]: %(message)s")
        #logging.basicConfig(filename=self.log_file, level=logging.DEBUG, format="[ %(asctime)s ] - [%(pathname)s func:%(funcName)s line:%(lineno)d]: %(message)s")
        #logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG, filename=self.log_file)

        logFormatter = logging.Formatter("%(asctime)s [%(levelname)-8.8s]  %(message)s")
        rootLogger = logging.getLogger()
        fileHandler = logging.FileHandler(self.log_file)
        fileHandler.setFormatter(logFormatter)
        rootLogger.addHandler(fileHandler)
        rootLogger.setLevel(logging.DEBUG)
        consoleHandler = logging.StreamHandler(sys.stdout)
        consoleHandler.setFormatter(logFormatter)
        rootLogger.addHandler(consoleHandler)

        self.platform = self.load_platform()
        self.musq_id = self.platform.generate_musq_id().strip()
        self.platform.setup()
        wants_thread = getattr(self.platform, "run", None)
        if wants_thread:
            logging.debug("Starting platform thread")
            self.platform.run()

        logging.info("-----------------------------")
        logging.info('musq starting; musq_id = %s' % (self.musq_id))

        self.modules = self.load_modules()
        self.env = self.get_env_data()

    def on_publish(self, client, userdata, mid):
        if self.killer.kill_now:
            if mid == self.kill_heartbeat_id:
                logging.info("Succesfully sent kill heartbeat message for musq id %s" % (self.musq_id))
                self.kill_heartbeat_id='done'

    def on_disconnect(self, client, userdata, rc):
        if rc != 0:
            logging.info("Unexpected disconnection.")
        else:
            logging.info("Disconnected.")

    def on_connect(self, client, userdata, flags, rc):
        logging.debug("MQTT connected (code %s)", str(rc))
        logging.debug("Sending subscribsption requests")

        if self.subscriptions is None:
            logging.warning("Warning, no subscriptions defined in musq.conf, subscribing to #")
            self.mqtt_client.subscribe("#")
        else:
            for crt_sub in self.subscriptions:
                logging.debug("Subscribing to " + crt_sub)
                self.mqtt_client.subscribe(crt_sub)

        self.mqtt_client.subscribe("/musq/dev/" + self.musq_id + "/gpio/#", 0)
        self.heartbeat()

    def on_message(self, client, userdatanp, msg):
        if self.killer.kill_now:
            return
        #logging.debug("Received message on topic: " + msg.topic+" "+str(msg.payload))
        
        if self.platform.topic is not None:
            for platform_topic in self.platform.topic:
                if mqtt.topic_matches_sub(platform_topic, msg.topic):
                    #logging.debug("Received message for platform; topic received: " + msg.topic)
                    self.platform.on_message_received(platform_topic, msg.topic, msg, "x config line")

        for name, module in self.modules.items():
            if module.topic is None:
                continue

            for module_topic in module.topic:
                if mqtt.topic_matches_sub(module_topic, msg.topic):
                    #logging.debug("Received message for module: " + module.internal_name + "; topic received: " + msg.topic)
                    module.on_message_received(module_topic, msg.topic, msg, "x config line")

    def heartbeat(self):
        self.raw_publish(self, self.formatted_time(), "/musq/heartbeat/" + self.musq_id, 2, True)

    def kill_heartbeat(self):
        if self.kill_heartbeat_id is None:
            val = self.raw_publish(self, '', "/musq/heartbeat/" + self.musq_id, 2, True)
            self.kill_heartbeat_id = val[1]

    def load_modules(self):
        modules = {}
        for instance_name, settings in self.settings.get("modules").items():
            if settings and settings.get("module"):
                module_name = settings.get("module")
                library = self.get_module_library(module_name)
                if isfile(self.mod_path + library + ".py"):
                    # don't load a disabled module
                    if ('off' in settings) or ('disabled' in settings):
                        if settings.get("off") == True or settings.get("off") == 1 \
                                or settings.get("disabled") == 1 or settings.get("disabled") == True:
                            logging.info("Not loading %s (%s), disabled in config file"
                                         % (instance_name, module_name))
                            continue
                    # instantiate it
                    instance = self.load_single_module(module_name)
                    instance.instance_name = instance_name
                    modules[instance_name] = instance
                    # put single string topics in a list
                    t = settings.get("topic")
                    if t is not None and isinstance(t, str):
                        logging.debug("Module %s (%s) has a single string topic, moved to [] "
                                      % (instance_name, module_name))
                        instance.topic = [t]
                    elif type(t) is list or type(t) is tuple:
                        instance.topic = t
                    # "link" it: configure parent instance, pass the module its settings
                    instance.link(self, settings)
                    # and now check if it is threadable
                    wants_thread = getattr(instance, "run", None)
                    if wants_thread:
                        if settings.get('dev_autostart_thread') and ( settings.get('dev_autostart_thread') is False or  settings.get('dev_autostart_thread') is 0 ):
                            logging.warning("Module %s (%s) may not work, thread autostart disabled by dev_autostart_thread option" % (instance_name, module_name))
                        else:
                            logging.info("Starting thread for %s (%s)" % (instance_name, module_name))
                            instance.run()
                else:
                    logging.warning("%s requires an invalid/non-existent module: %s" % (instance_name, module_name))

        result_str = []
        for key, module in modules.items():
            result_str.append(module.instance_name + " (" + module.internal_name + ")")

        logging.info("Loaded modules: %s", ", ".join(result_str))
        return modules

    def load_single_module(self, mod_name):
        library = self.get_module_library(mod_name)
        try:
            mod = importlib.import_module("musq_modules." + library)
        except:
            logging.debug("Loading module %s.%s, failed: %s", library, mod_name, sys.exc_info())
            return None
        else:
            constructor = getattr(mod, 'mm_' + mod_name)
            instance = constructor()
            logging.debug("Loading module %s, id=%s, instance = %s", mod_name, instance.get_id(), instance)
            return instance

    def get_module_library(self, mod_name):
        library = mod_name
        if mod_name == "copy":
            library = "common"
        return library


    def prepare_kill(self):
        self.platform.signal_exit()
        for key, module in self.modules.items():
            if module is not None:
                module.signal_exit()

    def load_platform(self):
        import platform as pyplatform
        if self.settings.get('platform') is None:
            logging.info("Running platform autodetect")
            pyplat = pyplatform.system().lower()
            if pyplat == 'windows':
                from platforms import platform_x86_win
                platform = platform_x86_win.platform_x86_win()
            elif pyplat == 'linux':
                # print ("_____ " + self.get_from_shell("cat /proc/cpuinfo | grep machine | awk -F ': ' '{print $2}'").decode("UTF-8").lower())
                # try to detect various subplatforms, rpi, oranges, bananans, neopis, etc #TODO
                if "raspberry pi" in (self.get_first_line("/sys/firmware/devicetree/base/model").lower()) \
                        or "raspberry pi" in (self.get_first_line("/proc/device-tree/model").lower()):
                    from platforms import platform_rpi
                    logging.debug("platform is rpi")
                    platform = platform_rpi.platform_rpi()
                elif "onion omega2+" in (self.get_from_shell(
                        "cat /proc/cpuinfo | grep machine | awk -F ': ' '{print $2}'").decode("UTF-8").lower()):
                    from platforms import platform_onion2
                    logging.debug("platform is omega onion2. You are one patient guy/gal!") 
                    platform = platform_onion2.platform_onion2()
                else:
                    from platforms import platform_linux
                    platform = platform_linux.platform_linux()
        else:
            plat = self.settings.get('platform')
            logging.info("Using preconfigured platform: " + plat)
            if plat == 'opione':
                from platforms import platform_opione
                platform = platform_opione.platform_opione()
                logging.info("Platform configured: Orange Pi One")
            if plat == 'nanopi_neo':
                from platforms import platform_nanopi_neo
                platform = platform_nanopi_neo.platform_nanopi_neo()
                logging.info("Platform configured: Orange Pi One")
            if plat == 'win' or plat == 'windows' or plat == 'x86_win':
                from platforms import platform_x86_win
                platform = platform_x86_win.platform_x86_win()
                logging.info("Platform configured: Windows, generic")

        platform.musq = self
        return platform

    def load_settings_file(self, path):
        if path is not None and isfile(path):
            print("Loading settings file: %s" % path)
            settings = yaml.load(open(path))
            self.config_file = path
            return settings
        else:
            return None

    def load_settings(self):
        settings = self.load_settings_file(self.config_file)
        if settings is None:
            settings = self.load_settings_file(os.path.join(os.path.expanduser("~"), ".musq.conf"))
        if settings is None:
            settings = self.load_settings_file(os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq.conf"))

        self.mqtt_server = settings['mqtt_server']
        self.mqtt_port = settings['mqtt_port']
        self.mqtt_client_id = settings['mqtt_client_id']
        self.mqtt_keepalive = settings['mqtt_keepalive']
        self.mod_path=os.path.join(os.path.dirname(os.path.realpath(__file__)), "musq_modules", "")
        self.subscriptions = settings.get('subscriptions') or []
        self.settings = settings

    def raw_publish(self, sender, message, topic, qos=0, retain=False):
        retain_log = ("R" if retain else "N")
        retain_log = ("X" if (retain and message == '') else retain_log)
        if type(sender) is not Musq:
            logging.debug("pub [raw!] from %s (id=%s) %s%d to topic [%s], message=\"%s\"" % (sender.internal_name, sender.my_id or None, retain_log, qos, topic, message) )
        else:
            logging.debug("pub [raw!] from %s (id=%s) %s%d to topic [%s], message=\"%s\"" % ("musq", "musq", retain_log, qos, topic, message) )
        return self.mqtt_client.publish(topic, message, qos, retain)
            
    def self_publish(self, sender, message, topic, qos=0, retain=False):
        if topic[0] != "/":
            topic = "/" + topic
        topic = sender.autotopic + topic

        retain_log = ("R" if retain else "N")
        retain_log = ("X" if (retain and message == '') else retain_log)
        logging.debug("pub [self] from %s (id=%s) %s%d to topic [%s], message=\"%s\"" % (sender.internal_name, sender.my_id, retain_log, qos, topic, message) )

        if topic is None and sender.autotopic is None:
            return False
        if qos is not None and qos != 0 and qos != 1 and qos != 2:
            return False
        if qos is None:
            qos = 0
        if retain is None:
            retain = False

        return self.mqtt_client.publish(topic, message, qos, retain)

    def formatted_time(self):
        t = time.localtime()
        formatted = time.strftime('%Y-%m-%d %H:%M:%S', t)

        # TODO tz is weird, check daylight and decimal rounding
        tz = time.timezone * -1
        if time.daylight:
            tz = time.altzone * -1
        tz = tz + 3500
        tz = str.format('{0:+06.2f}', tz / 3600)
        return formatted

    def get_first_line(self, dev_file, strip=False):
        try:
            with open(dev_file, "r") as file:
                data=file.readline()
            if strip:
                data = data.strip()
        except FileNotFoundError:
            data = ""
        return data or ""

    def get_from_shell(self, command):
        try:
            result = subprocess.check_output(command, shell=True).strip()
        except Exception:
            result = ""
        return result

    def get_env_data(self):
        env = {"version": self.__version__}
        platform_result = self.platform.get_env_data()
        result = env.copy()
        result.update(platform_result)
        env = result
        return env

    def main(self):
        self.mqtt_client = mqtt.Client(self.mqtt_client_id, clean_session=True, protocol=mqtt.MQTTv311)
        self.mqtt_client.on_connect = self.on_connect
        self.mqtt_client.on_message = self.on_message
        self.mqtt_client.on_disconnect = self.on_disconnect
        self.mqtt_client.on_publish = self.on_publish
        self.mqtt_client.will_set("/musq/heartbeat/" + self.musq_id, "DEAD", 2, True)
        try:
            self.mqtt_client.connect(self.mqtt_server, int(self.mqtt_port), 20)
            self.mqtt_client.loop_start()
        except:
            e = sys.exc_info()
            logging.error("Fatal MQTT error while connecting to %s:%s: %s (%s). Exiting" % ( self.mqtt_server,  self.mqtt_port, e[0], e[1] ) )
            sys.exit(1)

        self.killer = GracefulKiller()
        while True:
            time.sleep(0.01)
            if (self.killer.kill_now):
                self.prepare_kill()
                break
        
        self.kill_heartbeat()
        timeout = 0
        while True:
            if timeout == 50:
                logging.warning("Timed out waiting to confirm heartbeat kill signal. Disconnecting, testament will likely be published...")
                break
            elif self.kill_heartbeat_id == "done":
                logging.info("Heartbeat confirmed dead, exiting")
                break
            else:
                timeout += 1
                time.sleep(0.1)
                
        self.mqtt_client.disconnect()
        logging.info("Bye")
        self.mqtt_client.loop_stop()


class GracefulKiller:
    kill_now = False
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self,signum, frame):
        self.kill_now = True
        # cleanup the stdout log so the rest of the log looks ok during disconnect/last will & testament messages.
        # Yes, i'm avoiding the ^C
        print("")

m = Musq()
m.main()

